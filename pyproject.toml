[project]
name = "turbine-mesher"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Eduardo Firvida", email = "efirvida@gmail.com" }
]
dependencies = [
    "pynumad>=1.0.0",
    "matplotlib>=3.9.2",
    "meshio>=5.3.5",
    "pyvista>=0.44.1",
    "trimesh>=4.5.2",
    "alphashape>=1.3.1",
    "gmsh>=4.13.1",
]
readme = "README.md"
requires-python = ">= 3.8"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "ruff>=0.8.0",
    "ipython>=8.29.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/turbine_mesher"]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "E501", # line too long
  "B011", # 'assert False' is fine.
  "E741", # do not use variables named ‘l’, ‘O’, or ‘I’
  "C901", # fn is too complex
  "E731", # Do not assign a `lambda` expression, use a `def`
  "B904", # Within an `except` clause, raise exceptions with `raise ... from
          # err` or `raise ... from None` to distinguish them from errors in
          # exception handling

  # Might be dangerous
  "B023", # Function definition does not bind loop variable

  "ISC001", # it won't play nice with formatter
]
select = [
  "C",
  "E",
  "F",
  "W",
  "B",
  "INT",
  "ISC",    # Implicit string concat
  "G",      # f-string, %, and format in loggers is not logger-friendly.
  "RUF008",
  "W191",   # Indentation contains tabs
  "W605",   # Invalid escape sequence
  "W291",   # Trailing whitespace
  "W292",   # No newline at end of file
  "W293",   # Blank line contains whitespace
  "SIM118", # avoid 'key in dict.keys()'
  "SIM911", # use 'for k, v in dict.items()'.
  "SIM210", # use 'bool(a)' instead of 'True if a else False'
  "SIM211", # use 'not a' instead of 'False if a else True'
  "SIM401", # use 'd.get(k, default)' instead of 'd[k] if k in d else default'
  "SIM201", # use 'a != b' instead of 'not a == b'
  "SIM202", # use 'a == b' instead of 'not a != b'
  "SIM110", # https://docs.astral.sh/ruff/rules/reimplemented-builtin/
  "SIM101", # use 'isinstance(x, (T1, T2))' instead of two checks.
]
exclude = ["migrations", "__manifest__.py", "source/dists/odoo", "source/addons", "source/dists/openupgradelib"]
preview = true

[tool.ruff.format]
preview = true
exclude = []
